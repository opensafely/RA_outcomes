
. cap mkdir ./output/graphs

. 
. * Generates bar graphs with rate of outpatient appointments over time (rheuma
> tology and then all)
. * Rheumatology appointments
. import delimited using ./output/measures/join/measure_op_appt_rate.csv, numer
> iccols(3) clear
(4 vars, 56 obs)

. *Value to percentage of population
. gen proportion = value*100

. label variable proportion "Proportion of population"

. * Format date
. gen dateA = date(date, "YMD")

. drop date

. format dateA %dD/M/Y

. * Generate bar graph
. /*graph bar proportion, over(dateA, relabel(1 "Apr 2019" 2 " " 3 " " 4 "Jul 2
> 019" 5 " " ///
> 6 " " 7 "Oct 2019" 8 " " 9 " " 10 "Jan 2020" 11 " " 12 " " 12 "Apr 2020" 13 "
>  " ///
> 14 " " 15 "Jul 2020" 16 " " 17 " " 18 "Oct 2020" 19 " " 20 " " 21 "Jan 2021" 
> 22 ///
> " " 23 " " 24 "Apr 2021" 25 " " 26 " " 27 "Jul 2021" 28 " " 29 " " 30 "Oct 20
> 21" ///
> 31 " " 32 " " 33 "Jan 2022" 34 " " 35 " " 36 "Apr 2022") label(angle(45) tick
> s)) ///
> graphregion(fcolor(white)) ytitle("%")  ylabel(0(3)15) */
. line proportion dateA, graphregion(fcolor(white)) ytitle("%")  ylabel(0(3)15)

. graph export ./output/graphs/line_op_appt_rate.svg, as(svg) replace
(note: file ./output/graphs/line_op_appt_rate.svg not found)
(file ./output/graphs/line_op_appt_rate.svg written in SVG format)

. 
. * All outpatient appointments
. import delimited using ./output/measures/join/measure_op_appt_all_rate.csv, n
> umericcols(3) clear
(4 vars, 56 obs)

. *Value to percentage of population
. gen proportion = value*100

. label variable proportion "Proportion of population"

. * Format date
. gen dateA = date(date, "YMD")

. drop date

. format dateA %dD/M/Y

. * Generate bar graph
. /*graph bar proportion, over(dateA, relabel(1 "Apr 2019" 2 " " 3 " " 4 "Jul 2
> 019" 5 " " ///
> 6 " " 7 "Oct 2019" 8 " " 9 " " 10 "Jan 2020" 11 " " 12 " " 12 "Apr 2020" 13 "
>  " ///
> 14 " " 15 "Jul 2020" 16 " " 17 " " 18 "Oct 2020" 19 " " 20 " " 21 "Jan 2021" 
> 22 ///
> " " 23 " " 24 "Apr 2021" 25 " " 26 " " 27 "Jul 2021" 28 " " 29 " " 30 "Oct 20
> 21" ///
> 31 " " 32 " " 33 "Jan 2022" 34 " " 35 " " 36 "Apr 2022") label(angle(45) tick
> s)) ///
> graphregion(fcolor(white)) ytitle("%")  ylabel(0(5)35) */
. line proportion dateA, graphregion(fcolor(white)) ytitle("%")  ylabel(0(5)35)

. graph export ./output/graphs/line_op_appt_all_rate.svg, as(svg) replace
(note: file ./output/graphs/line_op_appt_all_rate.svg not found)
(file ./output/graphs/line_op_appt_all_rate.svg written in SVG format)

. 
. tempfile tempfile

. * rheumatology and all appointments together
. keep op_appt_all proportion dateA 

. rename proportion proportion_all

. save `tempfile'
file /tmp/St00015.000001 saved

. 
. import delimited using ./output/measures/join/measure_op_appt_rate.csv, numer
> iccols(3) clear
(4 vars, 56 obs)

. *Value to percentage of population
. gen proportion_rheum = value*100

. label variable proportion_rheum "Proportion of population"

. * Format date
. gen dateA = date(date, "YMD")

. drop date

. format dateA %dD/M/Y

. merge 1:1 date using `tempfile'

    Result                           # of obs.
    -----------------------------------------
    not matched                             0
    matched                                56  (_merge==3)
    -----------------------------------------

. drop _merge 

. gen proportion_other = proportion_all - proportion_rheum 

. * Generate stacked bar chart
. graph bar proportion_rheum proportion_other, over(dateA, relabel(1 "Apr 2019"
>  2 " " 3 " " 4 "Jul 2019" 5 " " 6 " " 7 "Oct 2019" ///
> 8 " " 9 " " 10 "Jan 2020" 11 " " 12 " " 12 "Apr 2020" 13 " " 14 " " 15 "Jul 2
> 020" 16 " " 17 " " 18 "Oct 2020" 19 " " 20 " " ///
> 21 "Jan 2021" 22 " " 23 " " 24 "Apr 2021" 25 " " 26 " " 27 "Jul 2021" 28 " " 
> 29 " " 30 "Oct 2021" 31 " " 32 " " 33 "Jan 2022" ///
> 34 " " 35 " " 36 "Apr 2022") label(angle(45) ticks)) graphregion(fcolor(white
> )) intensity(50) legend(label(1 "Rheumatology") ///
> label(2 "Other")) ytitle("%")  ylabel(0(5)20)

. graph export ./output/graphs/line_op_appt_both.svg, as(svg) replace
(note: file ./output/graphs/line_op_appt_both.svg not found)
(file ./output/graphs/line_op_appt_both.svg written in SVG format)

. 
. 
. * Graphs stratified by medium of rheumatology appointment
. import delimited using ./output/measures/join/measure_op_appt_medium_rate.csv
> , numericcols(3) clear
(5 vars, 560 obs)

. * Take out missing medium or if 4 as this is <10 for all months
. drop if op_appt_medium==. | op_appt_medium>=4
(392 observations deleted)

. * Combine telephone and telemedicine (2 & 3)
. * Flag for rows to combine
. gen comb = (op_appt_medium == 2 | op_appt_medium == 3)

. bys date: egen tele_appts = total(op_appt) if comb==1
(56 missing values generated)

. bys date: egen tele_pop = total(population) if comb==1
(56 missing values generated)

. replace op_appt = tele_appts if op_appt_medium==2
(56 real changes made)

. replace population = tele_pop if op_appt_medium==2
(56 real changes made)

. drop if op_appt_medium==3
(56 observations deleted)

. drop comb tele_appts tele_pop

. 
. * Generate new population as all those with medium described
. bys date: egen pop_new = total(population)

. * Calculate rate
. gen proportion = (op_appt/pop_new)*100

. drop population

. 
. * Format date
. gen dateA = date(date, "YMD")

. drop date

. format dateA %dD/M/Y

. * reshape dataset so columns with rates for medium 
. reshape wide value proportion op_appt, i(dateA) j(op_appt_medium)
(note: j = 1 2)

Data                               long   ->   wide
-----------------------------------------------------------------------------
Number of obs.                      112   ->      56
Number of variables                   6   ->       8
j variable (2 values)    op_appt_medium   ->   (dropped)
xij variables:
                                  value   ->   value1 value2
                             proportion   ->   proportion1 proportion2
                                op_appt   ->   op_appt1 op_appt2
-----------------------------------------------------------------------------

. describe

Contains data
  obs:            56                          
 vars:             8                          
-------------------------------------------------------------------------------
              storage   display    value
variable name   type    format     label      variable label
-------------------------------------------------------------------------------
dateA           float   %dD/M/Y               
op_appt1        int     %8.0g                 1 op_appt
value1          float   %9.0g                 1 value
proportion1     float   %9.0g                 1 proportion
op_appt2        int     %8.0g                 2 op_appt
value2          float   %9.0g                 2 value
proportion2     float   %9.0g                 2 proportion
pop_new         float   %9.0g                 
-------------------------------------------------------------------------------
Sorted by: dateA
     Note: Dataset has changed since last saved.

. * Label strata
. label var proportion1 "Face to face"

. label var proportion2 "Telephone"

. * Generate stacked bar chart
. graph bar proportion1 proportion2, over(dateA, relabel(1 "Apr 2019" 2 " " 3 "
>  " 4 "Jul 2019" 5 " " 6 " " 7 "Oct 2019" ///
> 8 " " 9 " " 10 "Jan 2020" 11 " " 12 " " 12 "Apr 2020" 13 " " 14 " " 15 "Jul 2
> 020" 16 " " 17 " " 18 "Oct 2020" 19 " " 20 " " ///
> 21 "Jan 2021" 22 " " 23 " " 24 "Apr 2021" 25 " " 26 " " 27 "Jul 2021" 28 " " 
> 29 " " 30 "Oct 2021" 31 " " 32 " " 33 "Jan 2022" ///
> 34 " " 35 " " 36 "Apr 2022") label(angle(45) ticks)) graphregion(fcolor(white
> )) intensity(50) legend(label(1 "Face to face") ///
> label(2 "Telephone")) ytitle("%")  ylabel(0(3)15)

. 
. graph export ./output/graphs/line_op_appt_medium.svg, as(svg) replace
(note: file ./output/graphs/line_op_appt_medium.svg not found)
(file ./output/graphs/line_op_appt_medium.svg written in SVG format)

. 
. * Generates bar graphs with rate of hospitalisations over time
. foreach this_group in ra /*ra_emergency*/ all {
  2.         import delimited using ./output/measures/join/measure_hosp_`this_g
> roup'_rate.csv, numericcols(3) clear
  3.         * Generate rate per 100,000
.         gen proportion = value*100 
  4.         * Format date
.         gen dateA = date(date, "YMD")
  5.         drop date
  6.         format dateA %dD/M/Y
  7.         * Generate line graph
.         /*graph twoway line rate dateA, tlabel(01Apr2019(120)01Apr2023, angle
> (45) ///
>         format(%dM-CY) labsize(small)) ytitle("Rate per 100,000") xtitle("Dat
> e") ylabel(#5, labsize(small) ///
>         angle(0)) yscale(r(0) titlegap(*10)) xmtick(##6) graphregion(fcolor(w
> hite))*/
.         /*graph bar proportion, over(dateA, relabel(1 "Apr 2019" 2 " " 3 " " 
> 4 "Jul 2019" ///
>         5 " " 6 " " 7 "Oct 2019" 8 " " 9 " " 10 "Jan 2020" 11 " " 12 " " 12 "
> Apr 2020" 13 ///
>         " " 14 " " 15 "Jul 2020" 16 " " 17 " " 18 "Oct 2020" 19 " " 20 " "21 
> "Jan 2021" 22 ///
>         " " 23 " " 24 "Apr 2021" 25 " " 26 " " 27 "Jul 2021" 28 " " 29 " " 30
>  "Oct 2021" 31 ///
>         " " 32 " " 33 "Jan 2022" 34 " " 35 " " 36 "Apr 2022") label(angle(45)
>  ticks)) ///
>         graphregion(fcolor(white)) ytitle("%")  ylabel(0(1)5)*/
.         line proportion dateA, graphregion(fcolor(white)) ytitle("%")  ylabel
> (0(1)5)
  8.         graph export ./output/graphs/line_hosp_`this_group'.svg, as(svg) r
> eplace
  9.         }
(4 vars, 56 obs)
(note: file ./output/graphs/line_hosp_ra.svg not found)
(file ./output/graphs/line_hosp_ra.svg written in SVG format)
(4 vars, 56 obs)
(note: file ./output/graphs/line_hosp_all.svg not found)
(file ./output/graphs/line_hosp_all.svg written in SVG format)

. 
. * Graphs stratified by type of admission e.g. daycase
. import delimited using ./output/measures/join/measure_hosp_ra_daycase_rate.cs
> v, numericcols(3) clear
(5 vars, 336 obs)

. * Determine total population size
. bys date: egen tot_population = total(population)

. * Drop if ra_daycase missing or is mother-baby record
. drop if (ra_daycase==. | ra_daycase==5 | ra_daycase==8)
(112 observations deleted)

. * Combine 3 & 4 as both ordinary admission
. gen comb = (ra_daycase == 3 | ra_daycase == 4)

. bys date: egen ordin_appts = total(ra_hosp) if comb==1
(112 missing values generated)

. bys date: egen ordin_pop = total(population) if comb==1
(112 missing values generated)

. replace ra_hosp = ordin_appts if ra_daycase==3
(56 real changes made)

. replace population = ordin_pop if ra_daycase==3
(56 real changes made)

. drop if ra_daycase==4
(56 observations deleted)

. drop comb ordin_appts ordin_pop

. * Generate new population as all those with type of admission
. *bys date: egen pop_new = total(population)
. * Calculate rate
. gen proportion = (ra_hosp/tot_population)*100

. 
. * Format date
. gen dateA = date(date, "YMD")

. drop date

. format dateA %dD/M/Y

. * reshape dataset so columns with rates for each ethnicity 
. reshape wide value proportion population tot_population ra_hosp, i(dateA) j(r
> a_daycase)
(note: j = 1 2 3)

Data                               long   ->   wide
-----------------------------------------------------------------------------
Number of obs.                      168   ->      56
Number of variables                   7   ->      16
j variable (3 values)        ra_daycase   ->   (dropped)
xij variables:
                                  value   ->   value1 value2 value3
                             proportion   ->   proportion1 proportion2 proporti
> on3
                             population   ->   population1 population2 populati
> on3
                         tot_population   ->   tot_population1 tot_population2 
> tot_population3
                                ra_hosp   ->   ra_hosp1 ra_hosp2 ra_hosp3
-----------------------------------------------------------------------------

. describe

Contains data
  obs:            56                          
 vars:            16                          
-------------------------------------------------------------------------------
              storage   display    value
variable name   type    format     label      variable label
-------------------------------------------------------------------------------
dateA           float   %dD/M/Y               
ra_hosp1        int     %8.0g                 1 ra_hosp
population1     int     %8.0g                 1 population
value1          float   %9.0g                 1 value
tot_population1 float   %9.0g                 1 tot_population
proportion1     float   %9.0g                 1 proportion
ra_hosp2        int     %8.0g                 2 ra_hosp
population2     int     %8.0g                 2 population
value2          float   %9.0g                 2 value
tot_population2 float   %9.0g                 2 tot_population
proportion2     float   %9.0g                 2 proportion
ra_hosp3        int     %8.0g                 3 ra_hosp
population3     int     %8.0g                 3 population
value3          float   %9.0g                 3 value
tot_population3 float   %9.0g                 3 tot_population
proportion3     float   %9.0g                 3 proportion
-------------------------------------------------------------------------------
Sorted by: dateA

. * Label strata 
. label var proportion1 "Ordinary admission"

. label var proportion2 "Day case"

. label var proportion3 "Regular admission"

. * Generate line graph
. graph bar proportion1 proportion2 proportion3, over(dateA, relabel(1 "Apr 201
> 9" 2 " " 3 " " 4 "Jul 2019" 5 " " 6 " " 7 "Oct 2019" ///
> 8 " " 9 " " 10 "Jan 2020" 11 " " 12 " " 12 "Apr 2020" 13 " " 14 " " 15 "Jul 2
> 020" 16 " " 17 " " 18 "Oct 2020" 19 " " 20 " " ///
> 21 "Jan 2021" 22 " " 23 " " 24 "Apr 2021" 25 " " 26 " " 27 "Jul 2021" 28 " " 
> 29 " " 30 "Oct 2021" 31 " " 32 " " 33 "Jan 2022" ///
> 34 " " 35 " " 36 "Apr 2022") label(angle(45) ticks)) graphregion(fcolor(white
> )) intensity(50) ///
> legend(label(1 "Ordinary admission") label(2 "Day case") label(3 "Regular adm
> ission")) ytitle("%")  ylabel(0(3)15)

. 
. graph export ./output/graphs/line_ra_daycase.svg, as(svg) replace
(note: file ./output/graphs/line_ra_daycase.svg not found)
(file ./output/graphs/line_ra_daycase.svg written in SVG format)

. 
. * Elective vs emergency admission 
. * Graphs stratified by admission method
. import delimited using ./output/measures/join/measure_hosp_ra_elective_rate.c
> sv, numericcols(3) clear
(5 vars, 560 obs)

. * Determine total population size
. bys date: egen tot_population = total(population)

. * Drop if ra_elective missing or is mother-baby record
. drop if (ra_elective=="" | ra_elective=="31" | ra_elective=="32" | ra_electiv
> e=="82" | ra_elective=="83" | ra_elective=="99")
(56 observations deleted)

. table ra_elective

----------------------
ra_electi |
ve        |      Freq.
----------+-----------
       11 |         56
       12 |         56
       13 |         56
       21 |         56
       22 |         56
       23 |         56
       24 |         56
       25 |         56
       2A |         56
----------------------

. * generate binary variable for elective admissions 
. gen ra_elective_n = (ra_elective == "81" | ra_elective == "11" | ra_elective 
> == "11.0" | ra_elective == "12" | ra_elective == "12.0" | ra_elective == "13"
> | ra_elective == "13.0")

. tab ra_elective*

ra_electiv |     ra_elective_n
         e |         0          1 |     Total
-----------+----------------------+----------
        11 |         0         56 |        56 
        12 |         0         56 |        56 
        13 |         0         56 |        56 
        21 |        56          0 |        56 
        22 |        56          0 |        56 
        23 |        56          0 |        56 
        24 |        56          0 |        56 
        25 |        56          0 |        56 
        2A |        56          0 |        56 
-----------+----------------------+----------
     Total |       336        168 |       504 

. bys ra_elective_n: table ra_elective

-------------------------------------------------------------------------------
-> ra_elective_n = 0

----------------------
ra_electi |
ve        |      Freq.
----------+-----------
       21 |         56
       22 |         56
       23 |         56
       24 |         56
       25 |         56
       2A |         56
----------------------

-------------------------------------------------------------------------------
-> ra_elective_n = 1

----------------------
ra_electi |
ve        |      Freq.
----------+-----------
       11 |         56
       12 |         56
       13 |         56
----------------------

. * Update number of hospitalisations and population to combine all categories 
> combined
. bys date ra_elective_n: egen ra_hosp_n = total(ra_hosp)

. *bys date: egen population_n = total(population)
. drop ra_elective ra_hosp population value

. 
. * Calculate proportion
. gen proportion = (ra_hosp_n/tot_population)*100

. duplicates drop

Duplicates in terms of all variables

(392 observations deleted)

. * Format date
. gen dateA = date(date, "YMD")

. drop date

. format dateA %dD/M/Y

. * reshape dataset so columns with rates for each ethnicity 
. reshape wide proportion tot_population ra_hosp_n, i(dateA) j(ra_elective)
(note: j = 0 1)

Data                               long   ->   wide
-----------------------------------------------------------------------------
Number of obs.                      112   ->      56
Number of variables                   5   ->       7
j variable (2 values)     ra_elective_n   ->   (dropped)
xij variables:
                             proportion   ->   proportion0 proportion1
                         tot_population   ->   tot_population0 tot_population1
                              ra_hosp_n   ->   ra_hosp_n0 ra_hosp_n1
-----------------------------------------------------------------------------

. describe

Contains data
  obs:            56                          
 vars:             7                          
-------------------------------------------------------------------------------
              storage   display    value
variable name   type    format     label      variable label
-------------------------------------------------------------------------------
dateA           float   %dD/M/Y               
tot_population0 float   %9.0g                 0 tot_population
ra_hosp_n0      float   %9.0g                 0 ra_hosp_n
proportion0     float   %9.0g                 0 proportion
tot_population1 float   %9.0g                 1 tot_population
ra_hosp_n1      float   %9.0g                 1 ra_hosp_n
proportion1     float   %9.0g                 1 proportion
-------------------------------------------------------------------------------
Sorted by: dateA

. * Label strata 
. label var proportion0 "Emergency admission"

. label var proportion1 "Elective admission"

. * Export dataset for output checking 
. export delimited using ./output/graphs/elective_data.csv 
file ./output/graphs/elective_data.csv saved

. * Generate line graph
. graph bar proportion0 proportion1, over(dateA, relabel(1 "Apr 2019" 2 " " 3 "
>  " 4 "Jul 2019" 5 " " 6 " " 7 "Oct 2019" ///
> 8 " " 9 " " 10 "Jan 2020" 11 " " 12 " " 12 "Apr 2020" 13 " " 14 " " 15 "Jul 2
> 020" 16 " " 17 " " 18 "Oct 2020" 19 " " 20 " " ///
> 21 "Jan 2021" 22 " " 23 " " 24 "Apr 2021" 25 " " 26 " " 27 "Jul 2021" 28 " " 
> 29 " " 30 "Oct 2021" 31 " " 32 " " 33 "Jan 2022" ///
> 34 " " 35 " " 36 "Apr 2022") label(angle(45) ticks)) graphregion(fcolor(white
> )) intensity(50) ///
> legend(label(1 "Emergency admission") label(2 "Elective admission")) ytitle("
> %")  ylabel(0(1)5)

. 
. graph export ./output/graphs/line_ra_elective.svg, as(svg) replace
(note: file ./output/graphs/line_ra_elective.svg not found)
(file ./output/graphs/line_ra_elective.svg written in SVG format)

. 
. * Generates bar graphs with rate of prescriptions over time
. foreach this_group in gc opioid_strong /*opioid_weak*/ ssri nsaid {
  2.         import delimited using ./output/measures/join/measure_med_`this_gr
> oup'_rate.csv, numericcols(3) clear
  3.         * Generate rate per 100,000
.         gen proportion = value*100 
  4.         * Format date
.         gen dateA = date(date, "YMD")
  5.         drop date
  6.         format dateA %dD/M/Y  
  7.         * Generate line graph
.         /*graph twoway line rate dateA, tlabel(01Apr2019(120)01Apr2022, angle
> (45) ///
>         format(%dM-CY) labsize(small)) ytitle("Rate per 100,000") xtitle("Dat
> e") ylabel(#5, labsize(small) ///
>         angle(0)) yscale(r(0) titlegap(*10)) xmtick(##6) graphregion(fcolor(w
> hite))*/
.         /*graph bar proportion, over(dateA, relabel(1 "Apr 2019" 2 " " 3 " " 
> 4 "Jul 2019" 5 " " ///
>         6 " " 7 "Oct 2019" 8 " " 9 " " 10 "Jan 2020" 11 " " 12 " " 12 "Apr 20
> 20" 13 " " ///
>         14 " " 15 "Jul 2020" 16 " " 17 " " 18 "Oct 2020" 19 " " 20 " "21 "Jan
>  2021" 22 " " ///
>         23 " " 24 "Apr 2021" 25 " " 26 " " 27 "Jul 2021" 28 " " 29 " " 30 "Oc
> t 2021" 31 " " ///
>         32 " " 33 "Jan 2022" 34 " " 35 " " 36 "Apr 2022") label(angle(45) tic
> ks)) ///
>         graphregion(fcolor(white)) ytitle("%")  ylabel(0(3)15)*/
.         line proportion dateA, graphregion(fcolor(white)) ytitle("%")  ylabel
> (0(3)15)
  8.         graph export ./output/graphs/line_med_`this_group'.svg, as(svg) re
> place
  9.         }
(4 vars, 56 obs)
(note: file ./output/graphs/line_med_gc.svg not found)
(file ./output/graphs/line_med_gc.svg written in SVG format)
(4 vars, 56 obs)
(note: file ./output/graphs/line_med_opioid_strong.svg not found)
(file ./output/graphs/line_med_opioid_strong.svg written in SVG format)
(4 vars, 56 obs)
(note: file ./output/graphs/line_med_ssri.svg not found)
(file ./output/graphs/line_med_ssri.svg written in SVG format)
(4 vars, 56 obs)
(note: file ./output/graphs/line_med_nsaid.svg not found)
(file ./output/graphs/line_med_nsaid.svg written in SVG format)

. 
. * Weak opioids has different axis
. import delimited using ./output/measures/join/measure_med_opioid_weak_rate.cs
> v, numericcols(3) clear
(4 vars, 56 obs)

. * Generate rate per 100,000
. gen proportion = value*100 

. * Format date
. gen dateA = date(date, "YMD")

. drop date

. format dateA %dD/M/Y  

. * Generate line graph
. /*graph twoway line rate dateA, tlabel(01Apr2019(120)01Apr2022, angle(45) ///
> format(%dM-CY) labsize(small)) ytitle("Rate per 100,000") xtitle("Date") ylab
> el(#5, labsize(small) ///
> angle(0)) yscale(r(0) titlegap(*10)) xmtick(##6) graphregion(fcolor(white))*/
. /*graph bar proportion, over(dateA, relabel(1 "Apr 2019" 2 " " 3 " " 4 "Jul 2
> 019" 5 " " ///
> 6 " " 7 "Oct 2019" 8 " " 9 " " 10 "Jan 2020" 11 " " 12 " " 12 "Apr 2020" 13 "
>  " ///
> 14 " " 15 "Jul 2020" 16 " " 17 " " 18 "Oct 2020" 19 " " 20 " "21 "Jan 2021" 2
> 2 " " ///
> 23 " " 24 "Apr 2021" 25 " " 26 " " 27 "Jul 2021" 28 " " 29 " " 30 "Oct 2021" 
> 31 " " ///
> 32 " " 33 "Jan 2022" 34 " " 35 " " 36 "Apr 2022") label(angle(45) ticks)) ///
> graphregion(fcolor(white)) ytitle("%")  ylabel(0(5)25)*/
. line proportion dateA, graphregion(fcolor(white)) ytitle("%")  ylabel(0(5)25)

. graph export ./output/graphs/line_med_opioid_weak.svg, as(svg) replace
(note: file ./output/graphs/line_med_opioid_weak.svg not found)
(file ./output/graphs/line_med_opioid_weak.svg written in SVG format)

. 
end of do-file

. . file open output using "/tmp/graphs.do.AWaQ.out", write text replace

. . file write output "success" 

. . file close output

. 
end of do-file


